@using ProgrammersBlog.Core.Enums;


@model UserListDto

@{
    Layout = "_Layout";
    ViewBag.Title = "Kullanıcılar";
}
<ol class="breadcrumb mb-3 mt-2">
    <li class="breadcrumb-item"><a asp-area="Admin" asp-controller="Home" asp-action="Index">Admin</a></li>
    <li class="breadcrumb-item active"><a asp-area="Admin" asp-controller="User" asp-action="Index">Kullanıcılar</a></li>
</ol>
@if (Model.ResultStatusType == ResultStatusType.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 mt-2">
        <div class="card-header">
            <i class="fas fa-table mr-1"></i>
            Kullanıcılar
        </div>
        <div class="card-body">
            <div class="spinner-border" role="status" style="display: none;">
                <span class="sr-only">Yükleniyor...</span>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered" id="usersTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Kullanıcı Adı</th>
                            <th>E-Posta Adresi</th>
                            <th>Adı</th>
                            <th>Soyadı</th>
                            <th>Telefon Numarası</th>
                            <th>Hakkında</th>
                            <th>Resim</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>ID</th>
                            <th>Kullanıcı Adı</th>
                            <th>E-Posta Adresi</th>
                            <th>Adı</th>
                            <th>Soyadı</th>
                            <th>Telefon Numarası</th>
                            <th>Hakkında</th>
                            <th>Resim</th>
                            <th>İşlemler</th>
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var user in Model.Users)
                        {
                            <tr name="@user.Id">
                                <td>@user.Id</td>
                                <td>@user.UserName</td>
                                <td>@user.Email</td>
                                <td>@user.FirstName</td>
                                <td>@user.LastName</td>
                                <td>@user.PhoneNumber</td>
                                @if (user.About!=null)
                                {
                                    <td>@(user.About.Length > 75 ? user.About.Substring(0, 75) : user.About)</td>
                                }
                                else
                                {
                                    <td></td>
                                }
                              
                                <td><img src="~/img/@user.Picture" alt="@user.UserName" class="my-image-table" /></td>
                                <td class="">
                                    <button class="btn btn-info btn-sm btn-detail" data-id="@user.Id"><span class="fas fa-newspaper"></span></button>
                                    <button class="btn   btn-warning btn-sm btn-assign" data-id="@user.Id"><span class="fas fa-user-shield"></span></button>
                                    <button class="btn  btn-primary btn-sm btn-update" data-id="@user.Id"><span class="fas fa-edit"></span></button>
                                    <button class="btn   btn-danger btn-sm btn-delete" data-id="@user.Id"><span class="fas fa-minus-circle"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@if (Model.ResultStatusType == ResultStatusType.Error)
{
    <div class="alert alert-danger mt-3">
        @Model.Message <br />
        Dashboard sayfasına geri dönmek için lütfen <a class="alert-link" asp-area="Admin" asp-controller="Home" asp-action="Index">tıklayınız.</a>
    </div>
}
@section Scripts
    {
    <script>
        $(document).ready(() => {

            //DataTables starts here.
            const dataTable = $('#usersTable').DataTable({

                dom:
                    "<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",


                buttons: [
                    {
                        text: 'Ekle',
                        className: 'btn btn-success',
                        attr: {
                            id: "btnAdd"
                        },
                        action: function (e, dt, node, config) {

                        }
                    },
                    {
                        text: 'Yenile',
                        className: 'btn btn-warning',
                        action: function (e, dt, node, config) {

                            $(".spinner-border").show();

                            $.ajax({
                                type: "GET",
                                url: "/Admin/User/GetAllUsers",
                                contentType: "application/json",

                                beforeSend: function () {
                                    $("#usersTable").hide();
                                    $(".spinner-border").show();
                                },

                                success: function (data) {
                                    console.log(data)

                                    const userLisDto = jQuery.parseJSON(data)

                                    console.log(userLisDto)

                                    dataTable.clear();
                                    if (userLisDto.ResultStatusType === 0) {

                                        $.each(userLisDto.Users.$values, function (index, user) {
                                            function hasUserAbout(){
                                                if(user.About!=null){
                                                  return  user.About.length > 75 ? user.About.substring(0, 75) : user.About
                                                }
                                                else{
                                                    return ""
                                                }
                                            }
                                            const newTableRow = dataTable.row.add([
                                                user.Id,
                                                user.UserName,
                                                user.Email,
                                                user.FirstName,
                                                user.LastName,
                                                user.PhoneNumber,
                                                hasUserAbout(),                                                                                                                                    
                                                `<img src="/img/${user.Picture}" alt="${user.UserName}" class="my-image-table" />`,
                                                `
                                                <button class="btn btn-info btn-sm btn-detail" data-id="${user.Id}"><span class="fas fa-newspaper"></span></button>
                                                <button class="btn btn-warning btn-sm btn-assign" data-id="${user.Id}"><span class="fas fa-user-shield"></span></button>
                                                <button class="btn btn-primary btn-sm btn-update" data-id="${user.Id}"><span class="fas fa-edit"></span></button>
                                                <button class="btn btn-danger btn-sm btn-delete" data-id="${user.Id}"><span class="fas fa-minus-circle"></span></button>
                                                                    `
                                            ]).node();
                                            hasUserAbout()
                                            const jqueryTableRow = $(newTableRow)
                                            jqueryTableRow.attr("name", `${user.Id}`)
                                        })
                                        dataTable.draw();
                                        $(".spinner-border").hide();
                                        $("#usersTable").fadeIn(1400);
                                    }

                                    else {
                                        toastr.error(`${userLisDto.Message}`, 'İşlem Başarısız!')
                                    }

                                },

                                error: function (err) {
                                    console.log(err)
                                    $(".spinner-border").hide();
                                    $("#usersTable").fadeIn(1400);
                                    toastr.error(`${err.responseText}`, 'Hata!')
                                }
                            });

                        }
                    }
                ],


                language: {
                    "emptyTable": "Tabloda herhangi bir veri mevcut değil",
                    "info": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                    "infoEmpty": "Kayıt yok",
                    "infoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                    "infoThousands": ".",
                    "lengthMenu": "Sayfada _MENU_ kayıt göster",
                    "loadingRecords": "Yükleniyor...",
                    "processing": "İşleniyor...",
                    "search": "Ara:",
                    "zeroRecords": "Eşleşen kayıt bulunamadı",
                    "paginate": {
                        "first": "İlk",
                        "last": "Son",
                        "next": "Sonraki",
                        "previous": "Önceki"
                    },
                    "aria": {
                        "sortAscending": ": artan sütun sıralamasını aktifleştir",
                        "sortDescending": ": azalan sütun sıralamasını aktifleştir"
                    },
                    "select": {
                        "rows": {
                            "_": "%d kayıt seçildi",
                            "1": "1 kayıt seçildi"
                        },
                        "cells": {
                            "1": "1 hücre seçildi",
                            "_": "%d hücre seçildi"
                        },
                        "columns": {
                            "1": "1 sütun seçildi",
                            "_": "%d sütun seçildi"
                        }
                    },
                    "autoFill": {
                        "cancel": "İptal",
                        "fillHorizontal": "Hücreleri yatay olarak doldur",
                        "fillVertical": "Hücreleri dikey olarak doldur",
                        "fill": "Bütün hücreleri <i>%d<\/i> ile doldur"
                    },
                    "buttons": {
                        "collection": "Koleksiyon <span class=\"ui-button-icon-primary ui-icon ui-icon-triangle-1-s\"><\/span>",
                        "colvis": "Sütun görünürlüğü",
                        "colvisRestore": "Görünürlüğü eski haline getir",
                        "copySuccess": {
                            "1": "1 satır panoya kopyalandı",
                            "_": "%ds satır panoya kopyalandı"
                        },
                        "copyTitle": "Panoya kopyala",
                        "csv": "CSV",
                        "excel": "Excel",
                        "pageLength": {
                            "-1": "Bütün satırları göster",
                            "_": "%d satır göster"
                        },
                        "pdf": "PDF",
                        "print": "Yazdır",
                        "copy": "Kopyala",
                        "copyKeys": "Tablodaki veriyi kopyalamak için CTRL veya u2318 + C tuşlarına basınız. İptal etmek için bu mesaja tıklayın veya escape tuşuna basın.",
                        "createState": "Şuanki Görünümü Kaydet",
                        "removeAllStates": "Tüm Görünümleri Sil",
                        "removeState": "Aktif Görünümü Sil",
                        "renameState": "Aktif Görünümün Adını Değiştir",
                        "savedStates": "Kaydedilmiş Görünümler",
                        "stateRestore": "Görünüm -&gt; %d",
                        "updateState": "Aktif Görünümün Güncelle"
                    },
                    "searchBuilder": {
                        "add": "Koşul Ekle",
                        "button": {
                            "0": "Arama Oluşturucu",
                            "_": "Arama Oluşturucu (%d)"
                        },
                        "condition": "Koşul",
                        "conditions": {
                            "date": {
                                "after": "Sonra",
                                "before": "Önce",
                                "between": "Arasında",
                                "empty": "Boş",
                                "equals": "Eşittir",
                                "not": "Değildir",
                                "notBetween": "Dışında",
                                "notEmpty": "Dolu"
                            },
                            "number": {
                                "between": "Arasında",
                                "empty": "Boş",
                                "equals": "Eşittir",
                                "gt": "Büyüktür",
                                "gte": "Büyük eşittir",
                                "lt": "Küçüktür",
                                "lte": "Küçük eşittir",
                                "not": "Değildir",
                                "notBetween": "Dışında",
                                "notEmpty": "Dolu"
                            },
                            "string": {
                                "contains": "İçerir",
                                "empty": "Boş",
                                "endsWith": "İle biter",
                                "equals": "Eşittir",
                                "not": "Değildir",
                                "notEmpty": "Dolu",
                                "startsWith": "İle başlar",
                                "notContains": "İçermeyen",
                                "notStartsWith": "Başlamayan",
                                "notEndsWith": "Bitmeyen"
                            },
                            "array": {
                                "contains": "İçerir",
                                "empty": "Boş",
                                "equals": "Eşittir",
                                "not": "Değildir",
                                "notEmpty": "Dolu",
                                "without": "Hariç"
                            }
                        },
                        "data": "Veri",
                        "deleteTitle": "Filtreleme kuralını silin",
                        "leftTitle": "Kriteri dışarı çıkart",
                        "logicAnd": "ve",
                        "logicOr": "veya",
                        "rightTitle": "Kriteri içeri al",
                        "title": {
                            "0": "Arama Oluşturucu",
                            "_": "Arama Oluşturucu (%d)"
                        },
                        "value": "Değer",
                        "clearAll": "Filtreleri Temizle"
                    },
                    "searchPanes": {
                        "clearMessage": "Hepsini Temizle",
                        "collapse": {
                            "0": "Arama Bölmesi",
                            "_": "Arama Bölmesi (%d)"
                        },
                        "count": "{total}",
                        "countFiltered": "{shown}\/{total}",
                        "emptyPanes": "Arama Bölmesi yok",
                        "loadMessage": "Arama Bölmeleri yükleniyor ...",
                        "title": "Etkin filtreler - %d",
                        "showMessage": "Tümünü Göster",
                        "collapseMessage": "Tümünü Gizle"
                    },
                    "thousands": ".",
                    "datetime": {
                        "amPm": [
                            "öö",
                            "ös"
                        ],
                        "hours": "Saat",
                        "minutes": "Dakika",
                        "next": "Sonraki",
                        "previous": "Önceki",
                        "seconds": "Saniye",
                        "unknown": "Bilinmeyen",
                        "weekdays": {
                            "6": "Paz",
                            "5": "Cmt",
                            "4": "Cum",
                            "3": "Per",
                            "2": "Çar",
                            "1": "Sal",
                            "0": "Pzt"
                        },
                        "months": {
                            "9": "Ekim",
                            "8": "Eylül",
                            "7": "Ağustos",
                            "6": "Temmuz",
                            "5": "Haziran",
                            "4": "Mayıs",
                            "3": "Nisan",
                            "2": "Mart",
                            "11": "Aralık",
                            "10": "Kasım",
                            "1": "Şubat",
                            "0": "Ocak"
                        }
                    },
                    "decimal": ",",
                    "editor": {
                        "close": "Kapat",
                        "create": {
                            "button": "Yeni",
                            "submit": "Kaydet",
                            "title": "Yeni kayıt oluştur"
                        },
                        "edit": {
                            "button": "Düzenle",
                            "submit": "Güncelle",
                            "title": "Kaydı düzenle"
                        },
                        "error": {
                            "system": "Bir sistem hatası oluştu (Ayrıntılı bilgi)"
                        },
                        "multi": {
                            "info": "Seçili kayıtlar bu alanda farklı değerler içeriyor. Seçili kayıtların hepsinde bu alana aynı değeri atamak için buraya tıklayın; aksi halde her kayıt bu alanda kendi değerini koruyacak.",
                            "noMulti": "Bu alan bir grup olarak değil ancak tekil olarak düzenlenebilir.",
                            "restore": "Değişiklikleri geri al",
                            "title": "Çoklu değer"
                        },
                        "remove": {
                            "button": "Sil",
                            "confirm": {
                                "_": "%d adet kaydı silmek istediğinize emin misiniz?",
                                "1": "Bu kaydı silmek istediğinizden emin misiniz?"
                            },
                            "submit": "Sil",
                            "title": "Kayıtları sil"
                        }
                    },
                    "stateRestore": {
                        "creationModal": {
                            "button": "Kaydet",
                            "columns": {
                                "search": "Kolon Araması",
                                "visible": "Kolon Görünümü"
                            },
                            "name": "Görünüm İsmi",
                            "order": "Sıralama",
                            "paging": "Sayfalama",
                            "scroller": "Kaydırma (Scrool)",
                            "search": "Arama",
                            "searchBuilder": "Arama Oluşturucu",
                            "select": "Seçimler",
                            "title": "Yeni Görünüm Oluştur",
                            "toggleLabel": "Kaydedilecek Olanlar"
                        },
                        "duplicateError": "Bu Görünüm Daha Önce Tanımlanmış",
                        "emptyError": "Görünüm Boş Olamaz",
                        "emptyStates": "Herhangi Bir Görünüm Yok",
                        "removeConfirm": "Görünümü Silmek İstediğinize Eminminisiniz?",
                        "removeError": "Görünüm Silinemedi",
                        "removeJoiner": "ve",
                        "removeSubmit": "Sil",
                        "removeTitle": "Görünüm Sil",
                        "renameButton": "Değiştir",
                        "renameLabel": "Görünüme Yeni İsim Ver -&gt; %s:",
                        "renameTitle": "Görünüm İsmini Değiştir"
                    }
                }
            });
            //DataTables ends here.

            // Ajax GET / Getting the _UserAddPartial  as Modal Form starts here.
            const placeHolderDiv = $('#modalPlaceHolder');
            $('#btnAdd').click(function () {

                const url = '/Admin/User/Add/';

                $.get(url).done(function (data) {

                    placeHolderDiv.html(data);
                    placeHolderDiv.find(".modal").modal('show');
                });
            });
            //Ajax GET / Getting the _UserAddPartial  as Modal Form ends here.


            // Ajax POST / Posting the FormData as UserAddDto starts from here.
            placeHolderDiv.on('click', '#btnSave', function (event) {
                event.preventDefault();
                const form = $("#form-user-add");
                const actionUrl = form.attr("action");

                const dataToSend = new FormData(form.get(0))

                $.ajax({
                    url: actionUrl,
                    type: "POST",
                    data: dataToSend,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        console.log(data)
                        const userAddAjaxModel = JSON.parse(data)
                        console.log(userAddAjaxModel)

                        const newFormBody = $(".modal-body", userAddAjaxModel.UserAddPartial);
                        $(".modal-body").replaceWith(newFormBody);

                        const isValid = newFormBody.find('[name="IsValid"]').val() === 'True'

                        if (isValid) {
                            $(".modal").modal('hide')
                            function hasUserAbout() {
                                if (userAddAjaxModel.UserDto.User.About != null) {
                                    return userAddAjaxModel.UserDto.User.About.length > 75 ? userAddAjaxModel.UserDto.User.About.substring(0, 75) : userAddAjaxModel.UserDto.User.About
                                }
                                else {
                                    return ""
                                }
                            }
                            const newTableRow = dataTable.row.add([
                                userAddAjaxModel.UserDto.User.Id,
                                userAddAjaxModel.UserDto.User.UserName,
                                userAddAjaxModel.UserDto.User.Email,
                                userAddAjaxModel.UserDto.User.FirstName,
                                userAddAjaxModel.UserDto.User.LastName,
                                userAddAjaxModel.UserDto.User.PhoneNumber,
                                hasUserAbout(),
                                `<img src="/img/${userAddAjaxModel.UserDto.User.Picture}" alt="${userAddAjaxModel.UserDto.User.UserName}" class="my-image-table" />`,
                                `
                                                        <button class="btn btn-info btn-sm btn-detail" data-id="${userAddAjaxModel.UserDto.User.Id}"><span class="fas fa-newspaper"></span></button>
                                                        <button class="btn btn-warning btn-sm btn-assign" data-id="${userAddAjaxModel.UserDto.User.Id}"><span class="fas fa-user-shield"></span></button>
                                                        <button class="btn btn-primary btn-sm btn-update" data-id="${userAddAjaxModel.UserDto.User.Id}"><span class="fas fa-edit"></span></button>
                                                        <button class="btn btn-danger btn-sm btn-delete" data-id="${userAddAjaxModel.UserDto.User.Id}"><span class="fas fa-minus-circle"></span></button>
                                                    `
                            ]).node();

                            const jqueryTableRow = $(newTableRow);
                            jqueryTableRow.attr("name", `${userAddAjaxModel.UserDto.User.Id}`)

                            dataTable.row(newTableRow).draw();

                            console.log(userAddAjaxModel.UserDto.Message)
                            toastr.success(`${userAddAjaxModel.UserDto.Message}`, 'Başarılı İşlem!')
                        }

                        else {

                            let listText = ""
                            $("#validation-summary > ul > li").each(function () {
                                let text = $(this).text()
                                listText += `*${text}\n`
                            });

                            toastr.warning(listText)
                        }
                    },


                    error: function (err) {
                        console.log(err)
                    }
                })
            })
            // Ajax POST / Posting the FormData as UserAddDto ends from here.


            //Ajax POST / Deleting a User starts from here
            $(document).on('click', '.btn-delete', function (event) {

                event.preventDefault();

                const id = $(this).attr("data-id");

                const tableRow = $(`[name="${id}"]`)

                const userName = tableRow.find("td:eq(1)").text();

                console.log("Table Row:" + tableRow)


                Swal.fire({
                    title: 'Silmek istediğinize emin misiniz?',
                    text: `${userName} adlı kullanıcı silinecektir!`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Evet, silmek istiyorum.',
                    cancelButtonText: 'Hayır, silmek istemiyorum.'
                }).then((result) => {


                    if (result.isConfirmed) {

                        $.ajax({
                            type: 'POST',
                            dataType: 'json',
                            data: { userId: id },
                            url: '@Url.Action("Delete","User")',
                            success: function (data) {

                                const userDto = JSON.parse(data);
                                console.log(userDto)

                                if (userDto.ResultStatusType === 0) {

                                    Swal.fire(
                                        'Silindi!',
                                        `${userDto.Message}`,
                                        'success'
                                    )

                                    dataTable.row(tableRow).remove().draw();
                                }

                                else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Başarısız İşlemz...',
                                        text: `${userDto.Message}`
                                    })
                                }

                            },


                            error: function (err) {
                                console.log(err)
                                toastr.error(`${err.responseText}`, "Hata!")
                            }
                        })
                    }
                })
            })
            //Ajax POST / Deleting a User ends from here


            //Ajax GET / Getting the UserUpdatePartial as Modal Form starts from here.
            $(document).on('click', '.btn-update', function () {

                const url = "/Admin/User/Update";
                const id = $(this).attr("data-id")

                console.log(id + " : update id")

                $.get(url, { userId: id }).done(function (data) {

                    placeHolderDiv.html(data)
                    placeHolderDiv.find('.modal').modal('show')

                }).fail(function () {
                    toastr.error("Bir hata oluştu.")
                })
            });
            //Ajax GET / Getting the UserUpdatePartial as Modal Form ends from here.


            //Ajax POST / Updating User starts from here
            placeHolderDiv.on('click', '#btnUpdate', function (event) {
                event.preventDefault();

                const form = $("#form-user-update");
                const actionUrl = form.attr("action");

                const dataToSend = new FormData(form.get(0))

                $.ajax({
                    url: actionUrl,
                    type: "POST",
                    data: dataToSend,
                    processData: false,
                    contentType: false,


                    success: function (data) {
                        const userUpdateAjaxModel = jQuery.parseJSON(data)
                        console.log(userUpdateAjaxModel)
                        let tableRow;
                        if (userUpdateAjaxModel.UserDto !== null) {
                            const id = userUpdateAjaxModel.UserDto.User.Id;
                            tableRow = $(`[name="${id}"]`)
                        }

                        const newFormBody = $(".modal-body", userUpdateAjaxModel.UserUpdatePartial);

                        placeHolderDiv.find(".modal-body").replaceWith(newFormBody)

                        const isValid = newFormBody.find('[name="IsValid"]').val() === "True"

                        if (isValid) {
                            placeHolderDiv.find(".modal").modal('hide')
                            function hasUserAbout() {
                                if (userUpdateAjaxModel.UserDto.User.About != null) {
                                    return userUpdateAjaxModel.UserDto.User.About.length > 75 ? userUpdateAjaxModel.UserDto.User.About.substring(0, 75) : userUpdateAjaxModel.UserDto.User.About
                                }
                                else {
                                    return ""
                                }
                            }

                            const updateRow = dataTable.row(tableRow).data([
                                userUpdateAjaxModel.UserDto.User.Id,
                                userUpdateAjaxModel.UserDto.User.UserName,
                                userUpdateAjaxModel.UserDto.User.Email,
                                userUpdateAjaxModel.UserDto.User.FirstName,
                                userUpdateAjaxModel.UserDto.User.LastName,
                                userUpdateAjaxModel.UserDto.User.PhoneNumber,
                                hasUserAbout(),
                                `<img src="/img/${userUpdateAjaxModel.UserDto.User.Picture}" alt="${userUpdateAjaxModel.UserDto.User.UserName}" class="my-image-table" />`,
                                `
                                                <button class="btn btn-info btn-sm btn-detail" data-id="${userUpdateAjaxModel.UserDto.User.Id}"><span class="fas fa-newspaper"></span></button>
                                                <button class="btn btn-warning btn-sm btn-assign" data-id="${userUpdateAjaxModel.UserDto.User.Id}"><span class="fas fa-user-shield"></span></button>
                                                <button class="btn btn-primary btn-sm btn-update" data-id="${userUpdateAjaxModel.UserDto.User.Id}"><span class="fas fa-edit"></span></button>
                                                <button class="btn btn-danger btn-sm btn-delete" data-id="${userUpdateAjaxModel.UserDto.User.Id}"><span class="fas fa-minus-circle"></span></button>
                                            `
                            ]);

                            tableRow.attr("name", `${userUpdateAjaxModel.UserDto.User.Id}`)
                            updateRow.invalidate();

                            console.log(userUpdateAjaxModel.UserDto.Message)
                            toastr.success(`${userUpdateAjaxModel.UserDto.Message}`, "Başarıyla Güncellendi!")
                        }

                        else {
                            let listText = ""
                            $("#validation-summary > ul > li").each(function () {
                                let text = $(this).text()
                                listText += `*${text}\n`
                            });

                            toastr.warning(listText)
                        }
                    },

                    error: function (error) {
                        toastr.error($`{error.responseText}`, "Hata!")
                    }
                })

            })
            //Ajax POST / Updating User ends from here




            $(function () {
                const url = '/Admin/User/GetDetail/';
                //const placeHolderDiv = $('#modalPlaceHolder');
                $(document).on('click',
                    '.btn-detail',
                    function (event) {
                        event.preventDefault();
                        const id = $(this).attr('data-id');
                        $.get(url, { userId: id }).done(function (data) {

                            console.log("gelen data:")
                            console.log(data)
                            placeHolderDiv.html(data);
                            placeHolderDiv.find('.modal').modal('show');
                        }).fail(function (err) {
                            toastr.error(`${err.responseText}`, 'Hata!');
                        });
                    });
            });



            /* Ajax GET / Getting the Role Assign as Modal Form starts from here. */
            const url = '/Admin/Role/UserRoleAssign';
            // const placeHolderDiv = $('#modalPlaceHolder');
            $(document).on('click',
                '.btn-assign',
                function (event) {
                    event.preventDefault();
                    const id = $(this).attr('data-id');
                    $.get(url, { userId: id }).done(function (data) {

                        console.log(data)
                        placeHolderDiv.html(data);
                        placeHolderDiv.find('.modal').modal('show');
                    }).fail(function (err) {
                        toastr.error(`${err.responseText}`, 'Hata!');
                    });
                });
            /* Ajax GET / Getting the Role Assign as Modal Form Ends from here. */


            /* Ajax POST / Updating a Role Assign starts from here */

            placeHolderDiv.on('click',
                '#btnAssign',
                function (event) {
                    event.preventDefault();
                    const form = $('#form-role-assign');
                    const actionUrl = form.attr('action');
                    const dataToSend = new FormData(form.get(0));
                    $.ajax({
                        url: actionUrl,
                        type: 'POST',
                        data: dataToSend,
                        processData: false,
                        contentType: false,
                        success: function (data) {
                            const userAssignAjaxModel = jQuery.parseJSON(data);
                            console.log(userAssignAjaxModel);
                           
                            const id = userAssignAjaxModel.UserDto.User.Id;
                            const tableRow = $(`[name="${id}"]`);
                            const newFormBody = $('.modal-body', userAssignAjaxModel.RoleAssignPartial);
                            placeHolderDiv.find('.modal-body').replaceWith(newFormBody);
                            const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                            if (isValid) {
                                placeHolderDiv.find('.modal').modal('hide');
                              
                                toastr.success(`${userAssignAjaxModel.UserDto.Message} `, "Başarılı İşlem!");
                            } else {
                                let summaryText = "";
                                $('#validation-summary > ul > li').each(function () {
                                    let text = $(this).text();
                                    summaryText = `*${text}\n`;
                                });
                                toastr.warning(summaryText);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                            toastr.error(`${err.responseText}`, 'Hata!');
                        }
                    });
                });
            /* Ajax POST / Updating a Role Assign ends from here */

        })




    </script>
}
